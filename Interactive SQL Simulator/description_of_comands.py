# SELECT 'столбцы или * для выбора всех столбцов; обязательно'
# FROM 'таблица; обязательно'
# WHERE 'условие/фильтрация, например, city = 'Moscow'; необязательно'
# GROUP BY 'столбец, по которому хотим сгруппировать данные; необязательно'
# HAVING 'условие/фильтрация на уровне сгруппированных данных; необязательно'
# ORDER BY 'столбец, по которому хотим отсортировать вывод; необязательно'
# DISTINCT - получить уникальные строки (отличающиеся друг от друга любым отображаемым полем).
# Работает чуть быстрее.
# GROUP BY - сгруппировать по какому-либо признаку,
# при этом можно использовать агрегатные функции SUM, AVG, MAX и т.д.
#
# IF(логическое_выражение, выражение_1, выражение_2)
# Функция вычисляет логическое_выражение, если оно истина – в поле заносится значение выражения_1,
# в противном случае –  значение выражения_2.
# Все три параметра IF() являются обязательными.
#
# операторы сравнения (
# равно «=»,
# не равно «<>»,
# больше «>»,
# меньше «<»,
# больше или равно«>=»,
# меньше или равно «<=»
# )
#
# после ключевого слова WHERE кроме операторов сравнения  и выражений может включать
# логические операции (И «and», ИЛИ «or», НЕ «not») и круглые скобки,
# изменяющие приоритеты выполнения операций.
#
# Приоритеты операций:
# 1 круглые скобки
# 2 умножение  (*),  деление (/)
# 3 сложение  (+), вычитание (-)
# 4 операторы сравнения (=, >, <, >=, <=, <>)
# 5 NOT
# 6 AND
# 7 OR
#
# после ключевого слова WHERE может включать операторы  BETWEEN и IN.
# Приоритет  у этих операторов такой же как у операторов сравнения,
# то есть они выполняются раньше, чем NOT, AND, OR
#
# При выборке можно указывать столбец или несколько столбцов, по которым необходимо отсортировать
# отобранные строки. Для этого используются ключевые слова ORDER BY, после которых задаются
# имена столбцов. При этом строки сортируются по первому столбцу, если указан второй столбец,
# сортировка осуществляется только для тех строк, у которых значения первого столбца одинаковы.
# По умолчанию ORDER BY выполняет сортировку по возрастанию. Чтобы управлять направлением
# сортировки вручную,
# после имени столбца указывается ключевое слово ASC (по возрастанию) или DESC (по убыванию).
#
#
# Оператор LIKE используется для сравнения строк. В отличие от операторов отношения равно (=) и
# не равно (<>), LIKE позволяет сравнивать строки не на полное совпадение (не совпадение),
# а в соответствии с шаблоном. Шаблон может включать обычные символы и символы-шаблоны.
# При сравнении с шаблоном, его обычные символы должны в точности совпадать с символами,
# указанными в строке. Символы-шаблоны могут совпадать с произвольными элементами символьной строки.
#
#
# % 	Любая строка, содержащая ноль или более символов
# SELECT * FROM book WHERE author LIKE '%М.%' выполняет поиск и выдает все книги, инициалы
# авторов которых содержат «М.»
# _ (подчеркивание)	Любой одиночный символ SELECT * FROM book WHERE title LIKE 'Поэм_'
# выполняет поиск и выдает все книги, названия которых либо «Поэма», либо «Поэмы» и пр.
#
# Чтобы указать, что в названии должен быть хотя бы один символ,
# можно использовать один из эквивалентных шаблонов:
#
#  "_%" - сначала идет символ, а за ним любое количество символов;
# "%_" - сначала идет любое количество символов, а затем обязательный символ;
# "%_%" - сначала идет любое количество символов, потом обязательный символ,
# а за ним любое количество символов.
#
# В запросы с групповыми функциями можно включать условие отбора строк, которое в обычных
# запросах записывается после WHERE. В запросах с групповыми функциями вместо WHERE используется
# ключевое слово HAVING , которое размещается после оператора GROUP BY
#
# Если столбец указан в SELECT БЕЗ применения групповой функции,
# то он обязательно должен быть указан и в GROUP BY.Иначе получим ошибку.
#
# WHERE и HAVING могут использоваться в одном запросе.
# При этом необходимо учитывать порядок выполнения  SQL запроса на выборку на СЕРВЕРЕ:
#
# 1 FROM
# 2 WHERE
# 3 GROUP BY
# 4 HAVING
# 5 SELECT
# 6 ORDER BY
# Сначала определяется таблица, из которой выбираются данные (FROM), затем из этой таблицы
# отбираются записи в соответствии с условием  WHERE, выбранные данные агрегируются (GROUP BY),
# из агрегированных записей выбираются те, которые удовлетворяют условию после HAVING.
# Потом формируются данные результирующей выборки, как это указано после SELECT
# ( вычисляются выражения, присваиваются имена и пр. ). Результирующая выборка сортируется,
# как указано после ORDER BY.
#
# Важно! Порядок ВЫПОЛНЕНИЯ запросов - это не порядок ЗАПИСИ ключевых слов в запросе на выборку.
# Порядок записи (синтаксис запроса) остается таким же, как рассматривался ранее в курсе.
# Порядок ВЫПОЛНЕНИЯ  нужен для того, чтобы понять, почему, например, в WHERE нельзя использовать
# имена выражений из SELECT. Просто SELECT выполняется компилятором позже, чем WHERE, поэтому ему
# неизвестно, какое там выражение написано.

